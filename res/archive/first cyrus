        CanvasForTries canvas = Try();

        ThreeDVector[] screenPoints = new ThreeDVector[]{
                new ThreeDVector(20, 20, 0),
                new ThreeDVector(780, 20, 0),
                new ThreeDVector(780, 780, 0),
                new ThreeDVector(20, 780, 0),

        };
        int n = screenPoints.length;

        for (int i = 0; i < n; i++) {
            canvas.addLine(new Line(
                    (int) screenPoints[i].x(),
                    (int) screenPoints[i].y(),
                    (int) screenPoints[(i + 1) % n].x(),
                    (int) screenPoints[(i + 1) % n].y()
            ));
        }


        // Cyrus Beck Method

        ThreeDVector p0 = new ThreeDVector(0, 200, 1);
        ThreeDVector p1 = new ThreeDVector(200, 0, 1);

        // canvas.addLine(new Line((int) p0.x(), (int) p0.y(), (int) p1.x(), (int) p1.y()));

        ThreeDVector[] result = new ThreeDVector[2];

        // calculate normals
        ThreeDVector[] normals = new ThreeDVector[4];
        for (int i = 0; i < n; i++) {
            normals[i] = new ThreeDVector(
                    screenPoints[i].y() - screenPoints[(i + 1) % n].y(),
                    screenPoints[(i + 1) % n].x() - screenPoints[i].x());
        }

        // calculate p1 - p0, and p0 - pE(i) (calculating pE(i) - p0 to get rid of -1 in denominator)
        System.out.println("Calculate:");
        ThreeDVector P1_P0 = p1.minus(p0);
        System.out.println("P1 - P0: " + P1_P0 + "\n");
        ThreeDVector[] P0_PEi = new ThreeDVector[4];
        for (int i = 0; i < n; i++) {
            P0_PEi[i] = screenPoints[i].minus(p0);
            System.out.println("P0 - PE" + i + ": " + P0_PEi[i] + "");
        }
        System.out.println("");
        double maxTe = 0;
        double minTl = 1;

        double numerator, denominator, t;

        for (int i = 0; i < n; i++) {
            numerator = normals[i].dot(P0_PEi[i]);
            denominator = normals[i].dot(P1_P0);
            t = numerator / denominator;
            System.out.println("normal "+i + " "+ normals[i]);
            System.out.println("t"+i+":\nnumerator: "+numerator +", denominator: "+denominator+"\nvalue: "+t+"\n");
            if (t < 0 || t > 1){
                continue;
            }
            if (denominator > 0) {
                if (t > maxTe) {
                    maxTe = t;
                }
            } else {
                if (t < minTl) {
                    minTl = t;
                }
            }
        }

        System.out.println("max te is (0 and up)" + maxTe);
        System.out.println("min tl is (1 and down)" + minTl);

        if (maxTe > minTl) {
            System.out.println("failed!");
            result[0] = new ThreeDVector(-1, -1);
            result[1] = new ThreeDVector(-1, -1);
        } else {
            result[0] = new ThreeDVector(
                    p0.x() + P1_P0.x() * maxTe,
                    p0.y() + P1_P0.y() * maxTe
            );
            result[1] = new ThreeDVector(
                    p0.x() + P1_P0.x() * minTl,
                    p0.y() + P1_P0.y() * minTl
            );
        }

//        System.out.println(result[0]);
//        System.out.println(result[1]);

        canvas.addLine(new Line(
                (int) result[0].x(),
                (int) result[0].y(),
                (int) result[1].x(),
                (int) result[1].y()
        ));